# ASP.NET Core
# Build and test ASP.NET Core projects targeting .NET Core.
# Add steps that run tests, create a NuGet package, deploy, and more:
# https://docs.microsoft.com/azure/devops/pipelines/languages/dotnet-core

trigger:
- master

pool:
  vmImage: 'vs2017-win2016'

variables:
  buildConfiguration: 'Release'

# do this before all your .NET Core tasks
steps:
#- task: DotNetCoreInstaller@0
#  inputs:
#    version: '2.1.700' # replace this value with the version that you need for your project
# ...

# restore nuget packages
- script: dotnet restore

#- task: DotNetCoreCLI@2
#  inputs:
#    command: restore
#    projects: '**/*.csproj'
#    feedsToUse: config
#    nugetConfigPath: NuGet.config    # Relative to root of the repository
#    externalFeedCredentials: <Name of the NuGet service connection>
# ...

#build using .Net Core task
#- task: DotNetCoreCLI@2
#  displayName: Build
#  inputs:
#    command: build
#    projects: '**/*.csproj'
#    arguments: '--configuration Release' # Update this to match your need

# build
- script: dotnet build --configuration $(buildConfiguration)
  displayName: 'dotnet build $(buildConfiguration)'

- script: dotnet publish --output $(Build.ArtifactStagingDirectory)
# ...
# do this after other tasks such as building
# - task: DotNetCoreCLI@2
#   inputs:
#     command: test
#     projects: '**/*Tests/*.csproj'
#     arguments: '--configuration $(buildConfiguration)'

# to collect code coverage
# ...
# do this after other tasks such as building
# - task: DotNetCoreCLI@2
#   inputs:
#     command: test
#     projects: '**/*Tests/*.csproj'
#     arguments: '--configuration $(buildConfiguration) --collect "Code coverage"'

# or this
# ...
# do this after your tests have run
# - script: dotnet test <test-project> --logger trx
# - task: PublishTestResults@2
#   condition: succeededOrFailed()
#   inputs:
#     testRunner: VSTest
#     testResultsFiles: '**/*.trx'

# to collect code coverage data
# ...
# do this after your tests have run
# - script: dotnet test <test-project> --logger trx --collect "Code coverage"
# - task: PublishTestResults@2
#   inputs:
#     testRunner: VSTest
#     testResultsFiles: '**/*.trx'

# ...
# do this near the end of your pipeline in most cases
- task: PublishBuildArtifacts@1